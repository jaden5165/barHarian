name: Daily Loyverse Scraping

on:
  schedule:
    # Runs at 00:00 UTC (8:00 AM Malaysia time)
    - cron: '0 0 * * *'
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    env:
      PYTHONUNBUFFERED: 1
      TZ: 'Asia/Kuala_Lumpur'
      
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Set up timezone
      run: |
        sudo timedatectl set-timezone Asia/Kuala_Lumpur
        
    - name: Install Chrome and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser chromium-chromedriver
        chromium-browser --version
        chromedriver --version
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run scraper
      env:
        LOYVERSE_ACCOUNTS: ${{ secrets.LOYVERSE_ACCOUNTS }}
        TWOCAPTCHA_API_KEY: ${{ secrets.TWOCAPTCHA_API_KEY }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
        HEADLESS: "true"
      run: |
        python -m src.scraper

    # Upload as artifact (backup)
    - name: Upload Excel report as artifact
      if: always()  # Upload even if script fails
      uses: actions/upload-artifact@v3
      with:
        name: loyverse-report-${{ github.run_id }}
        path: barHarian_*.xlsx
        retention-days: 7

    # Send email using custom Python script
    - name: Send Email with Excel Report
      if: success()  # Only run if scraping succeeded
      env:
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
      run: |
        python - <<EOF
        import os
        import glob
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from email.mime.application import MIMEApplication
        from datetime import datetime

        # Find the latest Excel file
        excel_files = glob.glob('barHarian_*.xlsx')
        if not excel_files:
            print("No Excel files found!")
            exit(1)
            
        latest_file = max(excel_files, key=os.path.getctime)

        # Create message
        msg = MIMEMultipart()
        msg['From'] = os.environ['EMAIL_USERNAME']
        msg['To'] = os.environ['EMAIL_RECIPIENTS']
        msg['Subject'] = f"Loyverse Report - {datetime.now().strftime('%Y-%m-%d')}"

        # Add body
        body = f"""
        Please find attached the Loyverse report.
        
        This report was automatically generated by GitHub Actions.
        Repository: {os.environ.get('GITHUB_REPOSITORY', 'N/A')}
        Workflow: {os.environ.get('GITHUB_WORKFLOW', 'N/A')}
        Run: {os.environ.get('GITHUB_SERVER_URL', '')} + "/" + {os.environ.get('GITHUB_REPOSITORY', '')} + "/actions/runs/" + {os.environ.get('GITHUB_RUN_ID', '')}
        """
        msg.attach(MIMEText(body, 'plain'))

        # Attach Excel file
        with open(latest_file, 'rb') as f:
            attachment = MIMEApplication(f.read(), _subtype='xlsx')
            attachment.add_header('Content-Disposition', 'attachment', 
                                filename=os.path.basename(latest_file))
            msg.attach(attachment)

        # Send email
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(os.environ['EMAIL_USERNAME'], 
                        os.environ['EMAIL_PASSWORD'])
            server.send_message(msg)
            print(f"Email sent successfully with {latest_file}")
        EOF

    # Handle failure notification
    - name: Send Failure Notification
      if: failure()
      env:
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
      run: |
        python - <<EOF
        import os
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime

        msg = MIMEMultipart()
        msg['From'] = os.environ['EMAIL_USERNAME']
        msg['To'] = os.environ['EMAIL_RECIPIENTS']
        msg['Subject'] = f"[FAILED] Loyverse Scraper - {datetime.now().strftime('%Y-%m-%d')}"

        body = f"""
        The Loyverse scraper workflow has failed.
        
        Repository: {os.environ.get('GITHUB_REPOSITORY', 'N/A')}
        Workflow: {os.environ.get('GITHUB_WORKFLOW', 'N/A')}
        Run: {os.environ.get('GITHUB_SERVER_URL', '')} + "/" + {os.environ.get('GITHUB_REPOSITORY', '')} + "/actions/runs/" + {os.environ.get('GITHUB_RUN_ID', '')}
        
        Please check the GitHub Actions logs for more details.
        """
        msg.attach(MIMEText(body, 'plain'))

        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(os.environ['EMAIL_USERNAME'], 
                        os.environ['EMAIL_PASSWORD'])
            server.send_message(msg)
            print("Failure notification sent")
        EOF